{"version":3,"sources":["resume/Slide.js","resume/NavButtons.js","resume/Main.js","index.js"],"names":["Slide","props","react_default","a","createElement","className","title","img","src","concat","alt","text","NavButtons","onClick","scrollToSlide","currentSlide","disabled","slidesArrLength","Object","keys","slides","length","ReactDOM","render","_useState","useState","_useState2","slicedToArray","setCurrentSlide","determineCurrentSlide","scrollTop","document","body","documentElement","slidePXHeight","clientHeight","window","innerHeight","forEach","slide","index","slideIndex","useEffect","addEventListener","style","height","id","autoPlay","muted","loop","type","assign","map","key","getElementById"],"mappings":"2hDAEeA,EAAA,SAAAC,GACX,OAAOC,EAAAC,EAAAC,cAAA,WAASC,UAAWJ,EAAMI,WAC7BH,EAAAC,EAAAC,cAAA,UAAKH,EAAMK,OAEXJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMM,IAAML,EAAAC,EAAAC,cAAA,OAAKI,IAAG,UAAAC,OAAYR,EAAMM,KAAOG,IAAI,GAAGL,UAAU,aAAgB,KAC/EH,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,gBCNPC,SAAA,SAAAX,GACX,OAAOC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACrBH,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMZ,EAAMa,cAAcb,EAAMc,aAAe,IAAIC,WAAUf,EAAMc,aAAe,IAAnG,YACAb,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAMZ,EAAMa,cAAcb,EAAMc,aAAe,IAAIC,WAAUf,EAAMc,aAAed,EAAMgB,gBAAkB,IAA3H,WCEFA,EAAkBC,OAAOC,KAAKC,GAAQC,OCF5CC,IAASC,OAAOrB,EAAAC,EAAAC,cDID,SAAAH,GAAS,IAAAuB,EACoBC,mBAAS,GAD7BC,EAAAR,OAAAS,EAAA,EAAAT,CAAAM,EAAA,GACbT,EADaW,EAAA,GACCE,EADDF,EAAA,GASpB,SAASG,IACL,IAAMC,EAAYC,SAASC,KAAKF,WAAaC,SAASE,gBAAgBH,UAEhEI,GADoBH,SAASC,KAAKG,aAAeC,OAAOC,aACpBpB,EAE1CG,EAAOkB,QAAQ,SAACC,EAAOC,GACfV,GAAaI,EAAgBM,GAASV,EAAYI,GAAiBM,EAAQ,IAC3EZ,EAAgBY,KAK5B,SAAS1B,EAAc2B,GACnB,GAAIA,GAAc,GAAKA,EAAaxB,EAAiB,CACjD,IACMiB,GADoBH,SAASC,KAAKG,aAAeC,OAAOC,aACpBpB,EAE1Cc,SAASE,gBAAgBH,UAAYI,EAAiBO,EAAcP,EAAgB,EACpFH,SAASC,KAAKF,UAAYI,EAAiBO,EAAcP,EAAgB,GAGjF,OA3BAQ,oBAAU,WACNX,SAASE,gBAAgBH,UAAY,EACrCC,SAASC,KAAKF,UAAY,EAC1BM,OAAOO,iBAAiB,SAAUd,IACnC,IAuBI3B,EAAAC,EAAAC,cAAA,WAASwC,MAAO,CAAEC,OAAM,GAAApC,OAAK2B,OAAOC,YAjCd,IAiCE,QAE3BnC,EAAAC,EAAAC,cAAA,SAAO0C,GAAG,YAAYC,UAAQ,EAACC,OAAK,EAACC,MAAI,GACrC/C,EAAAC,EAAAC,cAAA,UAAQI,IAAI,uBAAuB0C,KAAK,eAG5ChD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACJ,EAADkB,OAAAiC,OAAA,GAAW/B,EAAOL,GAAlB,CAAiCV,UAAU,YAE/CH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aACZe,EAAOgC,IAAI,SAACb,EAAOC,GAAR,OAAkBtC,EAAAC,EAAAC,cAAA,OAAKiD,IAAKb,EAAOnC,UAAS,eAAAI,OAAiBM,IAAiByB,EAAQ,SAAW,IAAM3B,QAAS,kBAAMC,EAAc0B,SAEpJtC,EAAAC,EAAAC,cAACQ,EAAD,CAAYG,aAAcA,EAAcE,gBAAiBA,EAAiBH,cAAeA,MC9CjF,MAAUiB,SAASuB,eAAe","file":"static/js/main.b2ff67e1.chunk.js","sourcesContent":["import React from 'react';\n\nexport default props => {\n    return <article className={props.className} >\n        <h1>{props.title}</h1>\n\n        <div className=\"content\">\n            {props.img ? <img src={`assets/${props.img}`} alt=\"\" className=\"slideImg\" /> : null}\n            <p>{props.text}</p>\n        </div>\n    </article>\n}","import React from 'react';\n\nexport default props => {\n    return <footer className=\"navButtons\">\n        <button onClick={() => props.scrollToSlide(props.currentSlide - 1)} disabled={props.currentSlide > 0 ? false : true}>Previous</button>\n        <button onClick={() => props.scrollToSlide(props.currentSlide + 1)} disabled={props.currentSlide < props.slidesArrLength - 1 ? false : true}>Next</button>\n    </footer>\n}","import React, { useState, useEffect } from 'react';\nimport Slide from './Slide';\nimport slides from \"./slides.json\";\nimport \"./Main.css\";\nimport NavButtons from './NavButtons';\n\nconst artificialHeightIncrease = 2000;\nconst slidesArrLength = Object.keys(slides).length;\n\nexport default props => {\n    const [currentSlide, setCurrentSlide] = useState(0);\n\n    useEffect(() => {\n        document.documentElement.scrollTop = 0;\n        document.body.scrollTop = 0;\n        window.addEventListener(\"scroll\", determineCurrentSlide);\n    }, []);\n\n    function determineCurrentSlide() {\n        const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;\n        const maxScrollTopValue = document.body.clientHeight - window.innerHeight;\n        const slidePXHeight = maxScrollTopValue / slidesArrLength;\n\n        slides.forEach((slide, index) => {\n            if (scrollTop >= slidePXHeight * index && scrollTop < slidePXHeight * (index + 1)) {\n                setCurrentSlide(index)\n            }\n        });\n    }\n\n    function scrollToSlide(slideIndex) {\n        if (slideIndex >= 0 && slideIndex < slidesArrLength) {\n            const maxScrollTopValue = document.body.clientHeight - window.innerHeight;\n            const slidePXHeight = maxScrollTopValue / slidesArrLength;\n\n            document.documentElement.scrollTop = slidePXHeight * (slideIndex) + slidePXHeight / 2;\n            document.body.scrollTop = slidePXHeight * (slideIndex) + slidePXHeight / 2;\n        }\n    }\n    return <section style={{ height: `${window.innerHeight + artificialHeightIncrease}px` }}>\n\n        <video id=\"wallpaper\" autoPlay muted loop>\n            <source src=\"assets/wallpaper.mp4\" type=\"video/mp4\" />\n        </video>\n\n        <div className=\"main\">\n            <Slide {...slides[currentSlide]} className=\"slide\" />\n        </div>\n        <aside className=\"scrollPos\">\n            {slides.map((slide, index) => <div key={index} className={`progressDot ${currentSlide === index ? \"active\" : \"\"}`} onClick={() => scrollToSlide(index)}/>)}\n        </aside>\n        <NavButtons currentSlide={currentSlide} slidesArrLength={slidesArrLength} scrollToSlide={scrollToSlide} />\n    </section>\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './resume/Main';\n\nReactDOM.render(<Main />, document.getElementById('root'));"],"sourceRoot":""}